"""
Django settings for student_management_system project.

Generated by 'django-admin startproject' using Django 2.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# from datetime import timedelta

import os
import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'so*rai_2(lk7t(yh%de+_kp_c%*r_b9wkga%gyo5tl9_8_r!xx'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
DEBUG = True


ALLOWED_HOSTS = ["*"]

# Here we link our static and media  file path

MEDIA_URL="/media/"
MEDIA_ROOT=os.path.join(BASE_DIR,"media")

STATIC_URL="/static/"
STATIC_ROOT=os.path.join(BASE_DIR,"static")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'livereload', #1 this is for livereload of the project on the browser
    'django.contrib.staticfiles',

    # here we register our app
    'dean_information_system_app',
]

MIDDLEWARE = [
    #===Enable Only Making Project Live on Heroku==
     'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'dean_information_system_app.logout_middleware.AutoLogoutMiddleware',#this isfor the auto logout
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'dean_information_system_app.LoginCheckMiddleWare.LoginCheckMiddleWare',   #this is the where we have to fix for the website dashboard 
    'livereload.middleware.LiveReloadScript', #2 this is for livereload of the project on the browser

    # ===1===this is for the auto logout=========
    # 'django_auto_logout.middleware.auto_logout',
]
# 

#





ROOT_URLCONF = 'dean_information_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['dean_information_system_app/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',



# ==================2====this is for the auto logout============================================
                # !!! Add this !!!
                # 'django_auto_logout.context_processors.auto_logout_client',
            ],
        },
    },
]

WSGI_APPLICATION = 'dean_information_system.wsgi.application'
# WSGI_APPLICATION = 'wsgi.application'



# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        #=====Enable Only Making Project Live on Heroku====
        #  'ENGINE': 'django.db.backends.sqlite3',
        #  'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),


        'ENGINE':'django.db.backends.mysql',
        'NAME':'dis',
        'USER':'dis',
        'PASSWORD':'dis',
        'HOST':'localhost',
        'PORT':'3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
AUTH_USER_MODEL="dean_information_system_app.CustomUser" #here we register our custome user model  (i.e. from the model we create )
# here we register the emailBackend by adding authentication
AUTHENTICATION_BACKENDS=['dean_information_system_app.EmailBackEnd.EmailBackEnd']


EMAIL_BACKEND="django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH=os.path.join(BASE_DIR,"sent_mails")

# EMAIL_HOST="smtp.gmail.com"
# EMAIl_PORT=587
# EMAIL_HOST_USER="GMAIL_EMAIL"
# EMAIL_HOST_PASSWORD="GMAIL PASSWORD"
# EMAIL_USE_TLS=True
# DEFAULT_FROM_EMAIL="dean management System <GMAIl_EMAIL>"
#

#Enable Only Making Project Live on Heroku
# STATICFILES_STORAGE='whitenoise.storage.CompressedManifestStaticFilesStorage'
# import dj_database_url
# prod_db=dj_database_url.config(conn_max_age=500)
# DATABASES['default'].update(prod_db)

# ===========================================

# AUTO_LOGOUT = {'IDLE_TIME': timedelta(minutes=1)}# logout after 10 minutes of downtime

# or you used this
# AUTO_LOGOUT = {'IDLE_TIME': 600}

# REDIRECT_TO_LOGIN_IMMEDIATELY after the idle-time has expired
# Use the REDIRECT_TO_LOGIN_IMMEDIATELY option if you want to redirect the user to the login page immediately after the idle-time expires:
# AUTO_LOGOUT = {
#     'IDLE_TIME': timedelta(minutes=10),
#     'REDIRECT_TO_LOGIN_IMMEDIATELY': True,
# }


# AUTO_LOGOUT = {'SESSION_TIME': 3600} or
# AUTO_LOGOUT = {'SESSION_TIME': timedelta(minutes=1)}

# Show messages when logging out automatically
# Set the message that will be displayed after the user automatically logs out of the system:

# AUTO_LOGOUT = {
#     'SESSION_TIME': 3600,
#     'MESSAGE': 'The session has expired. Please login again to continue.',
# }
# =======================================================



# ==================3 this is for the auto logout=====================================
# AUTO_LOGOUT = {'IDLE_TIME': 600}  # logout after 10 minutes of downtime
# AUTO_LOGOUT = {
#     'IDLE_TIME': 10,  # logout after 10 second of downtime
#     'REDIRECT_TO_LOGIN_IMMEDIATELY': True,  #this is will redirect to login page after the session time expires
#     'MESSAGE': 'The session has expired. Please login again to continue.', #this is the message that will show after during auto logout
#     }




# from datetime import timedelta
# AUTO_LOGOUT = {
#     'IDLE_TIME': timedelta(minutes=10),
#     'REDIRECT_TO_LOGIN_IMMEDIATELY': True,
# }


# =======THIS IS TO KEEP LOG FILES=====================
import os
import logging

LOGGING_DIR = os.path.join(BASE_DIR, 'logs')  # Create a 'logs' directory in your project's base directory

if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)

LOGGING_LEVEL = 'DEBUG'  # Adjust the log level as needed

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'mysql_queries.log'),  # Log file name
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['file'],
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
    },
}
